AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NodeJS lambda with mounted EFS

Parameters:
  EfsMountPath:
    Type: String
  S3DeployArtifactBucketName:
    Type: String

Resources:
  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              AWS: "*"

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: subnet-123
      SecurityGroups:
        - sg-456

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: subnet-789
      SecurityGroups:
        - sg-456
 
  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: !Ref EfsMountPath

  DataSyncS3AccessRole:
    Type: AWS::IAM::Role
    Description: Role datasync assumes to access s3
    Properties:
      RoleName: !Sub "${AWS::StackName}-DataSyncS3AccessRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - datasync.amazonaws.com
            Action: "sts:AssumeRole"

  DataSyncS3AccessRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - DataSyncS3AccessRole
    Description: IAM policy used by datasync to access S3
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DataSyncS3AccessRolePolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - s3:GetBucketLocation
            - s3:ListBucket
            - s3:ListBucketV2
            - s3:ListBucketMultipartUploads
          Resource:
            - !Sub "arn:aws:s3:::${S3DeployArtifactBucketName}"
        - Effect: Allow
          Action:
            - s3:AbortMultipartUpload
            - s3:DeleteObject
            - s3:GetObject
            - s3:ListMultipartUploadParts
            - s3:GetObjectTagging
            - s3:PutObjectTagging
            - s3:PutObject
          Resource:
            - !Sub "arn:aws:s3:::${S3DeployArtifactBucketName}/*"
      Roles:
        - !Ref DataSyncS3AccessRole

Outputs:
  EfsFileSystemArn:
    Description: EFS file system ARN
    Value: !GetAtt FileSystemResource.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-efs-filesystem-arn
  MountTargetOne:
    Description: Mount target one ID
    Value: !Ref MountTargetResource1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-efs-mount-target-one-id
  MountTargetTwo:
    Description: Mount target two ID
    Value: !Ref MountTargetResource2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-efs-mount-target-two-id
  EfsAccessPointArn:
    Description: Access point ARN
    Value: !GetAtt AccessPointResource.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-efs-access-point-arn
  EfsAccessPointArn:
    Description: DataSync S3 access role ARN
    Value: !GetAtt DataSyncS3AccessRole.Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ds-s3-access-role-arn
